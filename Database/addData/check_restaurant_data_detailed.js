// Script ki·ªÉm tra chi ti·∫øt data types v√† structure trong restaurants collection
// ƒê·ªÉ t√¨m ra nguy√™n nh√¢n th·ª±c s·ª± c·ªßa ConverterNotFoundException

print("=== KI·ªÇM TRA CHI TI·∫æT RESTAURANTS DATA TYPES ===");

// K·∫øt n·ªëi database
use('food_delivery_app');

// L·∫•y 1 restaurant ƒë·ªÉ xem structure chi ti·∫øt
const sampleRestaurant = db.restaurants.findOne();

print("\nüìã STRUCTURE C·ª¶A 1 RESTAURANT SAMPLE:");
print("Restaurant ID:", sampleRestaurant._id);
print("Restaurant Name:", sampleRestaurant.basicInfo?.name);

print("\nüîç CHI TI·∫æT C√ÅC FIELDS V√Ä TYPES:");

// Ki·ªÉm tra t·ª´ng field m·ªôt c√°ch chi ti·∫øt
function checkFieldType(obj, path = '') {
    for (let key in obj) {
        const fullPath = path ? `${path}.${key}` : key;
        const value = obj[key];
        const type = typeof value;
        
        if (value instanceof Date) {
            print(`${fullPath}: Date - ${value}`);
        } else if (value instanceof ObjectId) {
            print(`${fullPath}: ObjectId - ${value}`);
        } else if (Array.isArray(value)) {
            print(`${fullPath}: Array[${value.length}] - ${type}`);
            if (value.length > 0) {
                print(`  First element type: ${typeof value[0]}`);
            }
        } else if (type === 'object' && value !== null) {
            print(`${fullPath}: Object - ${type}`);
            // Recursively check nested objects
            if (Object.keys(value).length < 10) { // Avoid too deep recursion
                checkFieldType(value, fullPath);
            }
        } else {
            print(`${fullPath}: ${type} - ${value}`);
        }
    }
}

checkFieldType(sampleRestaurant);

print("\nüî¢ KI·ªÇM TRA C√ÅC INT FIELDS C·ª§ TH·ªÇ:");

// Ki·ªÉm tra c√°c fields m√† ch√∫ng ta nghi ng·ªù
const fieldsToCheck = ['dayOfWeek', 'deliveryRadius', 'estimatedDeliveryTime', 'totalReviews'];

fieldsToCheck.forEach(field => {
    const value = sampleRestaurant[field];
    print(`${field}:`);
    print(`  Value: ${value}`);
    print(`  Type: ${typeof value}`);
    print(`  Is Number: ${typeof value === 'number'}`);
    print(`  Is Date: ${value instanceof Date}`);
    print(`  Constructor: ${value?.constructor?.name}`);
    print("");
});

print("\nüìä TH·ªêNG K√ä TYPES TRONG TO√ÄN B·ªò COLLECTION:");

// Aggregate ƒë·ªÉ xem data types
const typeStats = db.restaurants.aggregate([
    {
        $project: {
            dayOfWeek_type: { $type: "$dayOfWeek" },
            deliveryRadius_type: { $type: "$deliveryRadius" },
            estimatedDeliveryTime_type: { $type: "$estimatedDeliveryTime" },
            totalReviews_type: { $type: "$totalReviews" }
        }
    },
    {
        $group: {
            _id: {
                dayOfWeek: "$dayOfWeek_type",
                deliveryRadius: "$deliveryRadius_type", 
                estimatedDeliveryTime: "$estimatedDeliveryTime_type",
                totalReviews: "$totalReviews_type"
            },
            count: { $sum: 1 }
        }
    },
    { $sort: { count: -1 } }
]).toArray();

print("Type combinations found:");
typeStats.forEach(stat => {
    print(`Count: ${stat.count}`);
    print(`  dayOfWeek: ${stat._id.dayOfWeek}`);
    print(`  deliveryRadius: ${stat._id.deliveryRadius}`);
    print(`  estimatedDeliveryTime: ${stat._id.estimatedDeliveryTime}`);
    print(`  totalReviews: ${stat._id.totalReviews}`);
    print("");
});

print("\nüéØ KI·ªÇM TRA ENTITY MAPPING TRONG JAVA:");

// L·∫•y restaurant v·ªõi full structure ƒë·ªÉ test
const fullRestaurant = db.restaurants.findOne({}, {
    _id: 1,
    basicInfo: 1,
    deliveryInfo: 1,
    dayOfWeek: 1,
    deliveryRadius: 1,
    estimatedDeliveryTime: 1,
    totalReviews: 1,
    rating: 1,
    coordinates: 1
});

print("Full restaurant object for Java mapping test:");
print(JSON.stringify(fullRestaurant, null, 2));

print("\n‚úÖ KI·ªÇM TRA HO√ÄN TH√ÄNH!");
print("N·∫øu t·∫•t c·∫£ fields ƒë·ªÅu l√† number type nh∆∞ng v·∫´n l·ªói converter,");
print("th√¨ v·∫•n ƒë·ªÅ c√≥ th·ªÉ l√† ·ªü entity mapping trong Java code."); 