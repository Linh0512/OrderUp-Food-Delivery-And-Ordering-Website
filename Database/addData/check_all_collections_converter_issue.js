// Script ki·ªÉm tra converter issues trong t·∫•t c·∫£ collections
// ƒê·ªÉ t√¨m ra collections n√†o c√≤n c√≥ Date fields b·ªã sai type

print("=== KI·ªÇM TRA CONVERTER ISSUES TRONG T·∫§T C·∫¢ COLLECTIONS ===");

// K·∫øt n·ªëi database
use('food_delivery_app');

// Danh s√°ch c√°c collections c·∫ßn ki·ªÉm tra
const collections = ['users', 'restaurants', 'orders', 'vouchers', 'reviews', 'dishes'];

collections.forEach(collectionName => {
    print(`\nüîç KI·ªÇM TRA COLLECTION: ${collectionName.toUpperCase()}`);
    
    try {
        // Ki·ªÉm tra xem collection c√≥ t·ªìn t·∫°i kh√¥ng
        const collectionExists = db.getCollectionNames().includes(collectionName);
        if (!collectionExists) {
            print(`  ‚ùå Collection ${collectionName} kh√¥ng t·ªìn t·∫°i`);
            return;
        }
        
        const totalDocs = db[collectionName].countDocuments();
        print(`  üìä T·ªïng s·ªë documents: ${totalDocs}`);
        
        if (totalDocs === 0) {
            print(`  ‚ö†Ô∏è  Collection ${collectionName} r·ªóng`);
            return;
        }
        
        // L·∫•y 1 sample document ƒë·ªÉ xem structure
        const sample = db[collectionName].findOne();
        
        print(`  üìã Sample document ID: ${sample._id}`);
        
        // Function ƒë·ªÉ t√¨m Date fields trong object
        function findDateFields(obj, path = '', dateFields = []) {
            for (let key in obj) {
                const currentPath = path ? `${path}.${key}` : key;
                const value = obj[key];
                
                if (value instanceof Date) {
                    // Ki·ªÉm tra xem field name c√≥ g·ª£i √Ω l√† int field kh√¥ng
                    const intLikeNames = [
                        'quantity', 'price', 'total', 'amount', 'count', 'number', 'num',
                        'dayOfWeek', 'deliveryRadius', 'estimatedDeliveryTime', 'totalReviews',
                        'rating', 'star', 'point', 'score', 'age', 'year', 'month', 'day',
                        'hour', 'minute', 'second', 'duration', 'time', 'length', 'size',
                        'weight', 'height', 'width', 'radius', 'distance', 'speed'
                    ];
                    
                    const isLikelyIntField = intLikeNames.some(intName => 
                        currentPath.toLowerCase().includes(intName.toLowerCase())
                    );
                    
                    dateFields.push({
                        path: currentPath,
                        value: value,
                        isLikelyIntField: isLikelyIntField
                    });
                } else if (Array.isArray(value) && value.length > 0) {
                    // Ki·ªÉm tra array elements
                    value.forEach((item, index) => {
                        if (typeof item === 'object' && item !== null) {
                            findDateFields(item, `${currentPath}[${index}]`, dateFields);
                        }
                    });
                } else if (typeof value === 'object' && value !== null) {
                    // Recursively check nested objects
                    findDateFields(value, currentPath, dateFields);
                }
            }
            return dateFields;
        }
        
        // T√¨m t·∫•t c·∫£ Date fields trong sample
        const dateFields = findDateFields(sample);
        
        if (dateFields.length > 0) {
            print(`  üîç T√¨m th·∫•y ${dateFields.length} Date fields:`);
            
            dateFields.forEach(field => {
                const flag = field.isLikelyIntField ? "‚ö†Ô∏è  SUSPICIOUS" : "‚úÖ OK";
                print(`    ${flag} ${field.path}: ${field.value}`);
            });
            
            // Ki·ªÉm tra c√°c suspicious fields trong to√†n b·ªô collection
            const suspiciousFields = dateFields.filter(f => f.isLikelyIntField);
            
            if (suspiciousFields.length > 0) {
                print(`  üö® Ki·ªÉm tra ${suspiciousFields.length} suspicious fields trong to√†n b·ªô collection:`);
                
                suspiciousFields.forEach(field => {
                    try {
                        const count = db[collectionName].countDocuments({
                            [field.path]: { $type: "date" }
                        });
                        
                        if (count > 0) {
                            print(`    ‚ùå ${field.path}: ${count} documents c√≥ Date value (c√≥ th·ªÉ g√¢y l·ªói converter)`);
                        } else {
                            print(`    ‚úÖ ${field.path}: 0 documents c√≥ Date value`);
                        }
                    } catch (error) {
                        print(`    ‚ö†Ô∏è  ${field.path}: Kh√¥ng th·ªÉ ki·ªÉm tra - ${error.message}`);
                    }
                });
            }
        } else {
            print(`  ‚úÖ Kh√¥ng t√¨m th·∫•y Date fields`);
        }
        
    } catch (error) {
        print(`  ‚ùå L·ªói khi ki·ªÉm tra collection ${collectionName}: ${error.message}`);
    }
});

print("\nüéØ KI·ªÇM TRA ƒê·∫∂C BI·ªÜT - USERS COLLECTION:");

// Ki·ªÉm tra ƒë·∫∑c bi·ªát users collection v√¨ logs c√≥ mention
try {
    const sampleUser = db.users.findOne();
    if (sampleUser) {
        print("Sample user structure:");
        
        // Ki·ªÉm tra c√°c fields th∆∞·ªùng g·∫∑p trong users
        const userFields = ['loyaltyPoints', 'totalOrders', 'rating', 'point'];
        
        userFields.forEach(field => {
            if (sampleUser[field] !== undefined) {
                print(`  ${field}: ${sampleUser[field]} (type: ${typeof sampleUser[field]})`);
                
                if (sampleUser[field] instanceof Date) {
                    const affectedCount = db.users.countDocuments({
                        [field]: { $type: "date" }
                    });
                    print(`    ‚ùå ${affectedCount} users c√≥ ${field} l√† Date type!`);
                }
            }
        });
        
        // Ki·ªÉm tra nested objects trong user
        if (sampleUser.profile) {
            print("User profile structure:");
            for (let key in sampleUser.profile) {
                const value = sampleUser.profile[key];
                print(`  profile.${key}: ${value} (type: ${typeof value})`);
                
                if (value instanceof Date && key !== 'dateOfBirth' && key !== 'createdAt' && key !== 'updatedAt') {
                    const affectedCount = db.users.countDocuments({
                        [`profile.${key}`]: { $type: "date" }
                    });
                    print(`    ‚ùå ${affectedCount} users c√≥ profile.${key} l√† Date type!`);
                }
            }
        }
    }
} catch (error) {
    print(`‚ùå L·ªói khi ki·ªÉm tra users: ${error.message}`);
}

print("\n‚úÖ KI·ªÇM TRA T·∫§T C·∫¢ COLLECTIONS HO√ÄN TH√ÄNH!"); 