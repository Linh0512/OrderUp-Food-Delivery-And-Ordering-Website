// Script ƒë·ªÉ chuy·ªÉn ƒë·ªïi userId v√† restaurantId t·ª´ String sang ObjectId trong reviews collection

db = db.getSiblingDB('food_delivery_app');

print("=== Migration: Chuy·ªÉn ƒë·ªïi String sang ObjectId trong Reviews ===");

// B∆∞·ªõc 1: Ph√¢n t√≠ch d·ªØ li·ªáu hi·ªán t·∫°i
print("B∆∞·ªõc 1: Ph√¢n t√≠ch d·ªØ li·ªáu hi·ªán t·∫°i...");
var allReviews = db.reviews.find({}).toArray();
var stringUserIds = [];
var stringRestaurantIds = [];
var objectIdUserIds = [];
var objectIdRestaurantIds = [];
var invalidUserIds = [];
var invalidRestaurantIds = [];

allReviews.forEach(function(review) {
    // Ki·ªÉm tra userId
    if (typeof review.userId === 'string') {
        try {
            // Ki·ªÉm tra string c√≥ th·ªÉ convert th√†nh ObjectId kh√¥ng
            ObjectId(review.userId);
            stringUserIds.push(review._id);
        } catch (e) {
            invalidUserIds.push({reviewId: review._id, userId: review.userId});
        }
    } else if (review.userId instanceof ObjectId) {
        objectIdUserIds.push(review._id);
    }
    
    // Ki·ªÉm tra restaurantId
    if (typeof review.restaurantId === 'string') {
        try {
            ObjectId(review.restaurantId);
            stringRestaurantIds.push(review._id);
        } catch (e) {
            invalidRestaurantIds.push({reviewId: review._id, restaurantId: review.restaurantId});
        }
    } else if (review.restaurantId instanceof ObjectId) {
        objectIdRestaurantIds.push(review._id);
    }
});

print("\n=== B√°o c√°o ph√¢n t√≠ch ===");
print("T·ªïng s·ªë reviews: " + allReviews.length);
print("UserIds c·∫ßn convert (String -> ObjectId): " + stringUserIds.length);
print("UserIds ƒë√£ l√† ObjectId: " + objectIdUserIds.length);
print("UserIds kh√¥ng h·ª£p l·ªá: " + invalidUserIds.length);
print("RestaurantIds c·∫ßn convert (String -> ObjectId): " + stringRestaurantIds.length);
print("RestaurantIds ƒë√£ l√† ObjectId: " + objectIdRestaurantIds.length);
print("RestaurantIds kh√¥ng h·ª£p l·ªá: " + invalidRestaurantIds.length);

// Hi·ªÉn th·ªã c√°c tr∆∞·ªùng h·ª£p kh√¥ng h·ª£p l·ªá
if (invalidUserIds.length > 0) {
    print("\n‚ö†Ô∏è UserIds kh√¥ng h·ª£p l·ªá:");
    invalidUserIds.forEach(function(item) {
        print("- Review: " + item.reviewId + " | UserId: " + item.userId);
    });
}

if (invalidRestaurantIds.length > 0) {
    print("\n‚ö†Ô∏è RestaurantIds kh√¥ng h·ª£p l·ªá:");
    invalidRestaurantIds.forEach(function(item) {
        print("- Review: " + item.reviewId + " | RestaurantId: " + item.restaurantId);
    });
}

// B∆∞·ªõc 2: Convert UserIds t·ª´ String sang ObjectId
if (stringUserIds.length > 0) {
    print("\n=== B∆∞·ªõc 2: Convert UserIds ===");
    var userIdConvertCount = 0;
    
    stringUserIds.forEach(function(reviewId) {
        var review = db.reviews.findOne({_id: reviewId});
        try {
            var newUserId = ObjectId(review.userId);
            var updateResult = db.reviews.updateOne(
                {_id: reviewId},
                {$set: {userId: newUserId}}
            );
            
            if (updateResult.modifiedCount > 0) {
                userIdConvertCount++;
                print("‚úÖ Converted userId cho review: " + reviewId + " | " + review.userId + " -> ObjectId");
            }
        } catch (e) {
            print("‚ùå L·ªói convert userId cho review: " + reviewId + " | Error: " + e.message);
        }
    });
    
    print("ƒê√£ convert " + userIdConvertCount + " userIds th√†nh c√¥ng");
} else {
    print("\nB∆∞·ªõc 2: Kh√¥ng c√≥ UserIds n√†o c·∫ßn convert");
}

// B∆∞·ªõc 3: Convert RestaurantIds t·ª´ String sang ObjectId
if (stringRestaurantIds.length > 0) {
    print("\n=== B∆∞·ªõc 3: Convert RestaurantIds ===");
    var restaurantIdConvertCount = 0;
    
    stringRestaurantIds.forEach(function(reviewId) {
        var review = db.reviews.findOne({_id: reviewId});
        try {
            var newRestaurantId = ObjectId(review.restaurantId);
            var updateResult = db.reviews.updateOne(
                {_id: reviewId},
                {$set: {restaurantId: newRestaurantId}}
            );
            
            if (updateResult.modifiedCount > 0) {
                restaurantIdConvertCount++;
                print("‚úÖ Converted restaurantId cho review: " + reviewId + " | " + review.restaurantId + " -> ObjectId");
            }
        } catch (e) {
            print("‚ùå L·ªói convert restaurantId cho review: " + reviewId + " | Error: " + e.message);
        }
    });
    
    print("ƒê√£ convert " + restaurantIdConvertCount + " restaurantIds th√†nh c√¥ng");
} else {
    print("\nB∆∞·ªõc 3: Kh√¥ng c√≥ RestaurantIds n√†o c·∫ßn convert");
}

// B∆∞·ªõc 4: X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh√¥ng h·ª£p l·ªá
if (invalidUserIds.length > 0 || invalidRestaurantIds.length > 0) {
    print("\n=== B∆∞·ªõc 4: X·ª≠ l√Ω d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ===");
    print("‚ö†Ô∏è C·∫¢nh b√°o: C√≥ " + (invalidUserIds.length + invalidRestaurantIds.length) + " tr∆∞·ªùng h·ª£p c√≥ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
    print("B·∫°n c·∫ßn xem x√©t x·ª≠ l√Ω th·ªß c√¥ng ho·∫∑c x√≥a c√°c reviews n√†y:");
    
    var invalidReviewIds = [];
    invalidUserIds.forEach(function(item) {
        invalidReviewIds.push(item.reviewId);
    });
    invalidRestaurantIds.forEach(function(item) {
        if (invalidReviewIds.indexOf(item.reviewId) === -1) {
            invalidReviewIds.push(item.reviewId);
        }
    });
    
    print("ƒê·ªÉ x√≥a c√°c reviews kh√¥ng h·ª£p l·ªá n√†y, ch·∫°y l·ªánh sau:");
    print("db.reviews.deleteMany({ _id: { $in: " + JSON.stringify(invalidReviewIds) + " } })");
}

// B∆∞·ªõc 5: Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
print("\n=== B∆∞·ªõc 5: Ki·ªÉm tra k·∫øt qu·∫£ ===");
var finalReviews = db.reviews.find({}).toArray();
var finalStringUserIds = 0;
var finalStringRestaurantIds = 0;
var finalObjectIdUserIds = 0;
var finalObjectIdRestaurantIds = 0;

finalReviews.forEach(function(review) {
    if (typeof review.userId === 'string') {
        finalStringUserIds++;
    } else if (review.userId instanceof ObjectId) {
        finalObjectIdUserIds++;
    }
    
    if (typeof review.restaurantId === 'string') {
        finalStringRestaurantIds++;
    } else if (review.restaurantId instanceof ObjectId) {
        finalObjectIdRestaurantIds++;
    }
});

print("\n=== B√°o c√°o k·∫øt qu·∫£ cu·ªëi c√πng ===");
print("T·ªïng reviews: " + finalReviews.length);
print("UserIds c√≤n l√† String: " + finalStringUserIds);
print("UserIds ƒë√£ l√† ObjectId: " + finalObjectIdUserIds);
print("RestaurantIds c√≤n l√† String: " + finalStringRestaurantIds);
print("RestaurantIds ƒë√£ l√† ObjectId: " + finalObjectIdRestaurantIds);

if (finalStringUserIds === 0 && finalStringRestaurantIds === 0) {
    print("\nüéâ Migration ho√†n th√†nh th√†nh c√¥ng! T·∫•t c·∫£ userId v√† restaurantId ƒë√£ l√† ObjectId");
} else {
    print("\n‚ö†Ô∏è V·∫´n c√≤n " + (finalStringUserIds + finalStringRestaurantIds) + " tr∆∞·ªùng String ch∆∞a ƒë∆∞·ª£c convert");
}

print("\n=== Migration ho√†n th√†nh ==="); 