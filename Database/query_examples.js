// ====================================
// V√ç D·ª§ QUERIES CHO FOOD DELIVERY APP
// ====================================

// K·∫øt n·ªëi database
use('food_delivery_app');

print("üìã C√°c v√≠ d·ª• queries th∆∞·ªùng d√πng cho Food Delivery App");

// ====================================
// 1. USER MANAGEMENT QUERIES
// ====================================
print("\nüë• === USER MANAGEMENT QUERIES ===");

// T√¨m user theo email
print("1. T√¨m user theo email:");
db.users.findOne({ email: "john.doe@gmail.com" });

// T√¨m t·∫•t c·∫£ restaurant hosts
print("2. T√¨m t·∫•t c·∫£ restaurant hosts:");
db.users.find({ role: "restaurantHost", isActive: true });

// C·∫≠p nh·∫≠t th√¥ng tin profile user
print("3. C·∫≠p nh·∫≠t profile user:");
db.users.updateOne(
  { email: "john.doe@gmail.com" },
  { 
    $set: { 
      "profile.phone": "0912345679",
      "updatedAt": new Date()
    }
  }
);

// Th√™m ƒë·ªãa ch·ªâ m·ªõi cho user
print("4. Th√™m ƒë·ªãa ch·ªâ m·ªõi:");
db.users.updateOne(
  { email: "john.doe@gmail.com" },
  {
    $push: {
      addresses: {
        _id: new ObjectId(),
        title: "C√¥ng ty",
        fullAddress: "999 L√™ VƒÉn Vi·ªát, Qu·∫≠n 9, TP.HCM",
        district: "Qu·∫≠n 9",
        city: "TP.HCM",
        isDefault: false,
        coordinates: { lat: 10.8504, lng: 106.7718 }
      }
    }
  }
);

// ====================================
// 2. RESTAURANT QUERIES
// ====================================
print("\nüè™ === RESTAURANT QUERIES ===");

// T√¨m nh√† h√†ng g·∫ßn v·ªã tr√≠ (geospatial query)
print("1. T√¨m nh√† h√†ng g·∫ßn v·ªã tr√≠:");
db.restaurants.find({
  "address.coordinates": {
    $near: {
      $geometry: {
        type: "Point",
        coordinates: [106.7014, 10.7758] // lng, lat
      },
      $maxDistance: 5000 // 5km
    }
  },
  isActive: true,
  isVerified: true
});

// T√¨m nh√† h√†ng theo cuisine type
print("2. T√¨m nh√† h√†ng theo lo·∫°i cuisine:");
db.restaurants.find({ 
  "businessInfo.cuisineTypes": "italian",
  isActive: true 
});

// T√¨m nh√† h√†ng c√≥ rating cao
print("3. T√¨m nh√† h√†ng c√≥ rating > 4.0:");
db.restaurants.find({ 
  "ratings.averageRating": { $gte: 4.0 },
  isActive: true 
}).sort({ "ratings.averageRating": -1 });

// Text search nh√† h√†ng
print("4. T√¨m ki·∫øm nh√† h√†ng theo t√™n:");
db.restaurants.find({
  $text: { $search: "pizza" },
  isActive: true
});

// ====================================
// 3. DISH QUERIES
// ====================================
print("\nüçï === DISH QUERIES ===");

// T√¨m m√≥n ƒÉn c·ªßa m·ªôt nh√† h√†ng
print("1. T√¨m m√≥n ƒÉn c·ªßa nh√† h√†ng:");
db.dishes.find({ 
  restaurantId: ObjectId("restaurant_001000000000"),
  isActive: true,
  "availability.isAvailable": true 
});

// T√¨m m√≥n ƒÉn theo category
print("2. T√¨m m√≥n ƒÉn theo category:");
db.dishes.find({ 
  categoryId: ObjectId("subcat_pizza000000000"),
  isActive: true 
});

// T√¨m m√≥n ƒÉn trong kho·∫£ng gi√°
print("3. T√¨m m√≥n ƒÉn trong kho·∫£ng gi√°:");
db.dishes.find({
  "pricing.basePrice": { $gte: 100000, $lte: 300000 },
  isActive: true
});

// T√¨m m√≥n ƒÉn bestseller
print("4. T√¨m m√≥n ƒÉn bestseller:");
db.dishes.find({ 
  "basicInfo.tags": "bestseller",
  isActive: true 
}).sort({ "stats.totalOrders": -1 });

// ====================================
// 4. ORDER QUERIES
// ====================================
print("\nüì¶ === ORDER QUERIES ===");

// T√¨m ƒë∆°n h√†ng c·ªßa customer
print("1. T√¨m ƒë∆°n h√†ng c·ªßa customer:");
db.orders.find({ 
  customerId: ObjectId("customer_001000000000") 
}).sort({ createdAt: -1 });

// T√¨m ƒë∆°n h√†ng c·ªßa nh√† h√†ng
print("2. T√¨m ƒë∆°n h√†ng c·ªßa nh√† h√†ng:");
db.orders.find({ 
  restaurantId: ObjectId("restaurant_001000000000") 
}).sort({ createdAt: -1 });

// T√¨m ƒë∆°n h√†ng theo status
print("3. T√¨m ƒë∆°n h√†ng ƒëang giao:");
db.orders.find({ 
  "status.current": "delivering" 
});

// Th·ªëng k√™ doanh thu theo ng√†y
print("4. Th·ªëng k√™ doanh thu theo ng√†y:");
db.orders.aggregate([
  {
    $match: {
      "status.current": "delivered",
      createdAt: {
        $gte: new Date("2024-03-01"),
        $lte: new Date("2024-03-31")
      }
    }
  },
  {
    $group: {
      _id: {
        year: { $year: "$createdAt" },
        month: { $month: "$createdAt" },
        day: { $dayOfMonth: "$createdAt" }
      },
      totalOrders: { $sum: 1 },
      totalRevenue: { $sum: "$orderDetails.totalAmount" },
      avgOrderValue: { $avg: "$orderDetails.totalAmount" }
    }
  },
  {
    $sort: { "_id.year": 1, "_id.month": 1, "_id.day": 1 }
  }
]);

// ====================================
// 5. REVIEW QUERIES
// ====================================
print("\n‚≠ê === REVIEW QUERIES ===");

// T√¨m reviews c·ªßa nh√† h√†ng
print("1. T√¨m reviews c·ªßa nh√† h√†ng:");
db.reviews.find({ 
  restaurantId: ObjectId("restaurant_001000000000"),
  isActive: true 
}).sort({ createdAt: -1 });

// T√¨m reviews c√≥ rating cao
print("2. T√¨m reviews c√≥ rating >= 4:");
db.reviews.find({ 
  "restaurantReview.rating": { $gte: 4 },
  isActive: true 
});

// Th·ªëng k√™ rating c·ªßa nh√† h√†ng
print("3. Th·ªëng k√™ rating c·ªßa nh√† h√†ng:");
db.reviews.aggregate([
  {
    $match: { 
      restaurantId: ObjectId("restaurant_001000000000"),
      isActive: true 
    }
  },
  {
    $group: {
      _id: "$restaurantId",
      averageRating: { $avg: "$restaurantReview.rating" },
      totalReviews: { $sum: 1 },
      ratings: { $push: "$restaurantReview.rating" }
    }
  }
]);

// ====================================
// 6. PROMOTION & VOUCHER QUERIES
// ====================================
print("\nüé´ === PROMOTION & VOUCHER QUERIES ===");

// T√¨m promotions ƒëang active
print("1. T√¨m promotions ƒëang active:");
db.promotions.find({
  status: "active",
  isActive: true,
  "schedule.startDate": { $lte: new Date() },
  "schedule.endDate": { $gte: new Date() }
});

// T√¨m vouchers c·ªßa user ch∆∞a s·ª≠ d·ª•ng
print("2. T√¨m vouchers ch∆∞a s·ª≠ d·ª•ng c·ªßa user:");
db.vouchers.find({
  userId: ObjectId("customer_001000000000"),
  "usage.isUsed": false,
  "validity.isActive": true,
  "validity.expiresAt": { $gte: new Date() }
});

// ====================================
// 7. DRIVER QUERIES
// ====================================
print("\nüöó === DRIVER QUERIES ===");

// T√¨m drivers ƒëang online v√† available
print("1. T√¨m drivers available:");
db.drivers.find({
  "status.isOnline": true,
  "status.isAvailable": true,
  "status.isVerified": true,
  isActive: true
});

// T√¨m driver g·∫ßn v·ªã tr√≠ pickup
print("2. T√¨m driver g·∫ßn v·ªã tr√≠:");
db.drivers.find({
  "status.currentLocation": {
    $near: {
      $geometry: {
        type: "Point",
        coordinates: [106.7058, 10.7745]
      },
      $maxDistance: 3000 // 3km
    }
  },
  "status.isOnline": true,
  "status.isAvailable": true
});

// ====================================
// 8. ANALYTICS QUERIES
// ====================================
print("\nüìä === ANALYTICS QUERIES ===");

// Top nh√† h√†ng theo doanh thu
print("1. Top nh√† h√†ng theo doanh thu:");
db.orders.aggregate([
  {
    $match: { "status.current": "delivered" }
  },
  {
    $group: {
      _id: "$restaurantId",
      totalOrders: { $sum: 1 },
      totalRevenue: { $sum: "$orderDetails.totalAmount" }
    }
  },
  {
    $lookup: {
      from: "restaurants",
      localField: "_id",
      foreignField: "_id",
      as: "restaurant"
    }
  },
  {
    $unwind: "$restaurant"
  },
  {
    $project: {
      restaurantName: "$restaurant.basicInfo.name",
      totalOrders: 1,
      totalRevenue: 1
    }
  },
  {
    $sort: { totalRevenue: -1 }
  },
  {
    $limit: 10
  }
]);

// Top m√≥n ƒÉn b√°n ch·∫°y
print("2. Top m√≥n ƒÉn b√°n ch·∫°y:");
db.orders.aggregate([
  {
    $match: { "status.current": "delivered" }
  },
  {
    $unwind: "$orderDetails.items"
  },
  {
    $group: {
      _id: "$orderDetails.items.dishId",
      dishName: { $first: "$orderDetails.items.dishName" },
      totalQuantity: { $sum: "$orderDetails.items.quantity" },
      totalRevenue: { $sum: "$orderDetails.items.subtotal" }
    }
  },
  {
    $sort: { totalQuantity: -1 }
  },
  {
    $limit: 10
  }
]);

// ====================================
// 9. NOTIFICATION QUERIES
// ====================================
print("\nüîî === NOTIFICATION QUERIES ===");

// T√¨m notifications ch∆∞a ƒë·ªçc c·ªßa user
print("1. T√¨m notifications ch∆∞a ƒë·ªçc:");
db.notifications.find({
  recipientId: ObjectId("customer_001000000000"),
  "interaction.isRead": false,
  isActive: true
}).sort({ createdAt: -1 });

// Mark notification as read
print("2. ƒê√°nh d·∫•u notification ƒë√£ ƒë·ªçc:");
db.notifications.updateOne(
  { _id: ObjectId("notif_001000000000000") },
  {
    $set: {
      "interaction.isRead": true,
      "interaction.readAt": new Date()
    }
  }
);

// ====================================
// 10. COMPLEX AGGREGATION QUERIES
// ====================================
print("\nüîç === COMPLEX AGGREGATION QUERIES ===");

// Dashboard stats cho admin
print("1. Dashboard stats cho admin:");
db.orders.aggregate([
  {
    $facet: {
      totalStats: [
        {
          $group: {
            _id: null,
            totalOrders: { $sum: 1 },
            totalRevenue: { $sum: "$orderDetails.totalAmount" },
            avgOrderValue: { $avg: "$orderDetails.totalAmount" }
          }
        }
      ],
      statusBreakdown: [
        {
          $group: {
            _id: "$status.current",
            count: { $sum: 1 }
          }
        }
      ],
      recentOrders: [
        {
          $sort: { createdAt: -1 }
        },
        {
          $limit: 5
        },
        {
          $lookup: {
            from: "users",
            localField: "customerId", 
            foreignField: "_id",
            as: "customer"
          }
        },
        {
          $lookup: {
            from: "restaurants",
            localField: "restaurantId",
            foreignField: "_id", 
            as: "restaurant"
          }
        }
      ]
    }
  }
]);

// Restaurant performance report
print("2. Restaurant performance report:");
db.restaurants.aggregate([
  {
    $lookup: {
      from: "orders",
      localField: "_id",
      foreignField: "restaurantId",
      as: "orders"
    }
  },
  {
    $lookup: {
      from: "reviews", 
      localField: "_id",
      foreignField: "restaurantId",
      as: "reviews"
    }
  },
  {
    $project: {
      name: "$basicInfo.name",
      totalOrders: { $size: "$orders" },
      completedOrders: {
        $size: {
          $filter: {
            input: "$orders",
            cond: { $eq: ["$$this.status.current", "delivered"] }
          }
        }
      },
      totalRevenue: {
        $sum: {
          $map: {
            input: {
              $filter: {
                input: "$orders",
                cond: { $eq: ["$$this.status.current", "delivered"] }
              }
            },
            as: "order",
            in: "$$order.orderDetails.totalAmount"
          }
        }
      },
      avgRating: { $avg: "$reviews.restaurantReview.rating" },
      totalReviews: { $size: "$reviews" }
    }
  },
  {
    $sort: { totalRevenue: -1 }
  }
]);

print("\n‚úÖ T·∫•t c·∫£ v√≠ d·ª• queries ƒë√£ ho√†n th√†nh!");
print("üí° Tip: Ch·∫°y t·ª´ng query ri√™ng l·∫ª ƒë·ªÉ test v√† hi·ªÉu r√µ h∆°n");
print("üí° Tip: S·ª≠ d·ª•ng .explain() ƒë·ªÉ xem query execution plan");
print("üí° Tip: T·∫°o indexes ph√π h·ª£p cho c√°c queries th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng"); 